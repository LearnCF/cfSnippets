{
	"title": "Rethrowing errors to handle errors at the local AND global level",
	"description": "The rethrow function is, in my opinion, one of the coolest things ever. <code>rethrow()</code> lets your app catch and handle exceptions locally before rethrowing the exception to log or handle the error at a global level. This is awesomely helpful if you need to undo a transaction, for example, or to recover from any other context-specific situation.",
	"snippet": {
		"type": "script",
		"source": "// First level of error handling\r\n// Say, onError in Application.cfc\r\ntry {\r\n  // somewhere in app-land...\r\n  try {\r\n    // do something error-able\r\n    x = 1 / 0;\r\n  } catch( any e ) {\r\n    // Recover so we don't bork the app\r\n    transactionRollback();\r\n    // let the parent-level catch handle error logging.\r\n    rethrow();\r\n  }\r\n} catch( any exception ) {\r\n  cfparam( name=\"exception.message\", default=\"[no message]\" );\r\n  cfparam( name=\"exception.detail\", default=\"[no detail]\" );\r\n\r\n  // Log it with LogBox!\r\n  writeOutput( \"Logging error with logbox...\" );\r\n  logger.error(\r\n    \"Error in cfSnippets app: #exception.message# #exception.detail#\"\r\n    exception\r\n  );\r\n}"
	},
	"cheatsheets": [ "error-handling" ]
}